
global MakeTetrisGrid = function(x, y) {
	
	local TetrisGrid = {
		Size,
		Position,
		Scale,
		Thickness,
		BoxList,
		GridList,
		Overlay,
	};

	TetrisGrid.Init = function(sizeX, sizeY) {
		.Size = Vec2i(sizeX, sizeY);
		.Scale = Vec2(0.98f, 1.8f);
		.Position = Vec2(0.0f);
		.Thickness = 0.001f;
		.BoxList = linkedlist();
		.GridList = linkedlist();

		for (i = 0; i < .Size.x + 1; i += 1) {
			local box = Sprite();
			box.Position = (Vec2((.Scale.x / (.Size.x)) * i, 0.0f) - Vec2(.Scale.x / 2.0f, 0.0f)) + .Position;
			box.Dimension = Vec2(.Thickness, .Scale.y);
			
			.GridList.PushFront(box);
		}

		for (i = 0; i < .Size.y + 1; i += 1) {
			local box = Sprite();
			box.Position = (Vec2(0.0f, (.Scale.y / (.Size.y)) * i) - Vec2(0.0f, .Scale.y / 2.0f)) + .Position;
			box.Dimension = Vec2(.Scale.x, .Thickness);
			
			.GridList.PushFront(box);
		}
		
		local te = Sprite();
		te.Color = Vec4(1.0f, 0.0f, 0.0f, 0.4f);
		te.Position = .Position;
		te.Dimension = .Scale;
		te.Draw();

		.Overlay = te;
	};

	TetrisGrid.Draw = function() {
		for (i = 0; i < .GridList.Size(); i += 1) {
			local box = .GridList.PopFront();
			box.Draw();
			.GridList.PushBack(box);
		};

		for (i = 0; i < .BoxList.Size(); i += 1) {
			local box = .BoxList.PopFront();
			box.Draw();
			.BoxList.PushBack(box);
		};

		.Overlay.Draw();
	};

	TetrisGrid.GetBoxSize = function() {
		return Vec2(.Scale.x, .Scale.y) / .Size;
	};

	TetrisGrid.GetBoxPosition = function(x, y) {
		assert(x < .Size.x);
		assert(y < .Size.y);

		local topLeft = Vec2(.Position - (.Scale / 2.0f));
		local pos = topLeft + (.GetBoxSize() * Vec2(x, y)) + (.GetBoxSize() / 2.0f);
		return pos;
	};

	TetrisGrid.InsertBox = function(x, y) {
		local box = Sprite();
		box.Position = .GetBoxPosition(x, y);
		box.Dimension = .GetBoxSize();

		.BoxList.PushFront(box);
	};

	TetrisGrid.Init(x, y);

	return TetrisGrid;

};
