local MakeTetris = function() {
	
	local Tetris = {
		ThreadID,
		Grid,
		GRID_SIZE_X,
		GRID_SIZE_Y,
	};

	Tetris.Init = function() {
		print("Init");

		.GRID_SIZE_X = 10;
		.GRID_SIZE_Y = 24;

		system.DoFile("games/tetris/scripts/TetrisGrid.gm");
		system.DoFile("games/tetris/scripts/TetrisShapes.gm");
		system.DoFile("games/tetris/scripts/TetrisLogic.gm");

		.Grid = MakeTetrisGrid(.GRID_SIZE_X, .GRID_SIZE_Y);

		.PositionArray = array();
		.PositionArray.Resize(.GRID_SIZE_X);
		for (i = 0; i < .GRID_SIZE_X; i += 1) {
			.PositionArray[i] = array();
			.PositionArray[i].Resize(.GRID_SIZE_Y);
			for (j = 0; j < .GRID_SIZE_Y; j += 1) {
				.PositionArray[i][j] = false;
			}
		}

		.ActiveShape = MakeTetrisLine();
		.ActiveShape.Position = Vec2i(.GRID_SIZE_X / 2, 0);

		.ThreadID = this:thread(.Update);
	};

	Tetris.Update = function() {
		while(true) {
			RegisterDraw(.Draw, this);
			RegisterGui(.Gui, this);

			.AddShape();

			yield();
		}
	};

	Tetris.Draw = function() {
		.Grid.Draw();
	};

	Tetris.Gui = function() {
		Gui.Begin("Tetris Props");

		Gui.Text("Grid Props");
		.Grid.Size = Gui.SliderVec2i("Size", .Grid.Size, 1, 100);
		.Grid.Scale = Gui.DragVec2("Scale", .Grid.Scale, 0.001f);
		.Grid.Thickness = Gui.DragFloat("Thickness", .Grid.Thickness, 0.0001f);
		.Grid.Position = Gui.DragVec2("Position", .Grid.Position, 0.01f);

		.Grid.Recalculate();

		Gui.End();
	};

	Tetris.AddShape = function() {
		for (i = 0; i < .ActiveShape.SHAPE_SIZE; i += 1) {
			.Grid.InsertBox(.ActiveShape.Position.x + .ActiveShape.PositionOffset[i].x,
							.ActiveShape.Position.y + .ActiveShape.PositionOffset[i].y, 
							.ActiveShape.ShapeList[i]
			);
		}
	};

	return Tetris;

};

global g_Game = MakeTetris();